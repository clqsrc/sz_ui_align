

https://blog.csdn.net/a511244213/article/details/49590379

----

pjsip之PJNATH简介(1)
daydayup
于 2015-11-02 18:37:36 发布 3046
收藏 3
分类专栏： pjsip
pjsip 专栏收录该内容
7 篇文章 0 订阅
订阅专栏
在学习pjsip的过程中，发现只是单单的阅读英文官方文档，对于里边概念的理解还是不够透彻，并且苦于pjsip没有发现全一点的中文版本，所以想尽自己所能为建设和谐社会而贡献一份力量，文中定会有所疏漏，希望各位看客能够不吝赐教。

　　1:pjsip教程(一)之PJNATH简介

　　2:pjsip教程(二)之ICE穿越打洞：Interactive Connectivity Establishment简介

　　3:pjsip教程(三)之ICE stream transport的使用

　　4:pjsip文档(四)之ICE Session的使用方法

　　原文地址：http://www.pjsip.org/docs/latest/pjnath/docs/html/index.htm

PJNATH - Open Source ICE, STUN, and TURN Library 

PJNATH (PJSIP NAT Helper)是一个开源的并且是使用标准协议(STUN,TURN,ICE)提供NAT设备穿越功能的库.

Background

在现今的网络中网络地址转换技术/设备(NAT)很常见，这种技术允许多台主机共享同一个公网地址从而接入网络，其主要目的就是为了缓解IPv4地址的枯竭。 这种技术在普通的服务器/客户端模式下并不存在问题，因为请求总是由客户端发起，并且客户端也不需要维持长时间的维持与服务器的连接。但是NAT技术最大的问题就是使得点对点通信不能进行，比如VoIP.

Introduction to PJNATH

PJNATH库包含了NAT穿越的标准实现，它可以独自应用或者与PJSUA-LIB共同使用，PJSUA-LIB库将PJSIP, PJMEDIA, PJNATH很好的集成在一起，使用方便。.

PJNATH 具有以下特征:

    STUNbis实现
    该实现遵照RFC 5389.它既提供了现成的STUN网络接口，又提供了基于TURN和ICE的实现更高层次STUN的框架。

    NAT 类型探测
    探测通信两端的NAT设备类型，该实现依据 RFC 3489. 然而为了支持ICE，协助NAT穿越的NAT类型的探测已经不被推荐了，但是在故障排除的时候还是有用的，因此提供了NAT类型探测的功能.

    TURN实现
    TURN 是使用中转服务器进行中继通信的协议，它联合ICE提供了尽可能的高效的通信路径。它的实现符合 draft-ietf-behave-turn-14 草案.

    ICE实现
    ICE 是发现待通信两端一条或多条可直接通信的路径的协议。它的实现符合draft-ietf-mmusic-ice-19.txt 草案 

在将来，我们会实现更多的协议(比如UPnP IGD、SOCKS5).

Library Organization

提供的主要组件如下：

    STUN: Session Traversal Utilities for NAT
    TURN: Traversal Using Relays around NAT
    ICE: Interactive Connectivity Establishment
    NAT Classification/Detection Tool

除了 NAT Classification/DetectionTool, 每个组件都进一步划分为两个部分：

    传输对象
    传输对象是session对象加上指定的  传输/套接字（transport/sockets）  的实现，它给应用程序提供一个直接可以使用的对象。比如，STUN transport, TURN transport以及ICE stream transport

　　传输无关/session 层
　　　session对象(比如 STUN session, TURNsession, ICE session)是维护通信协议中session的核心对象，它是与传输无关的（意思是说它自己没有专门用于传输数据的socket，它只有发送和接受数据的接口，至于发送和接收数据时用到的具体的协议它是不关心的）。这样，不管传输层使用的什么协议，开发者都可以重用这个对象，比如使用UDP, TCP或者TLS或者是开发者自己实现的其他某种协议。


-----------------------------------------------
https://www.cnblogs.com/ishang/p/3413262.html

 中文翻译：pjsip教程(三)之ICE stream transport的使用

　　1:pjsip教程(一)之PJNATH简介

　　2:pjsip教程(二)之ICE穿越打洞：Interactive Connectivity Establishment简介

　　3:pjsip教程(三)之ICE stream transport的使用

　　4:pjsip文档(四)之ICE Session的使用方法

本文原文地址：http://www.pjsip.org/pjnath/docs/html/group__PJNATH__ICE__STREAM__TRANSPORT.htm#ga6fb7cfdde71523f9fce885fd5cad982d
学习使用 ICE stream transport

下面的步骤描述了怎样使用ICE session:

    首先初始化结构体： pj_ice_strans_cfg. 这个结构体中包含了ICE stream transport 的配置信息，其中就包括了SUTN以及TURN的配置信息.
    使用 pj_ice_strans_create()方法创建stream transport的实例. 该函数的成功调用还需要以下列出的重要的参数:
        pj_ice_strans_cfg ：主配置信息
        components 的个数
        用于产生回调的结构体的实例：pj_ice_strans_cb .
    当调用函数pj_ice_strans_create()后，初始化的过程会在后台运行，该初始化过程主要是收集本地的候选地址，最后，当初始化完成，应用程序会在回调函数on_ice_complete 中返回
    当想要开启一个媒体流时(例如，想进行视频或语音电话)，使用pj_ice_strans_init_ice()创建一个ICE session用于进行打洞.
    通常在两个客户端开始打洞之前，双方都需要知道对方的ICE信息(ICE信息，包括用户名，密码以及3组候选地址),那么可以使用下面的方法得到自己的ICE信息:
        pj_ice_strans_get_ufrag_pwd()
        pj_ice_strans_enum_cands()
        pj_ice_strans_get_def_cand()
        应用程序需要将以上信息封装为SDP消息发送至对方.
    当应用程序收到远程客户端发来的ICE消息后，就可以开始ICE探测了。开始ICE探测需要调用pj_ice_strans_start_ice()方法.
    需要注意的是，PJNATH库不支持直接处理SDP消息，SDP消息的封装与拆解还需应用程序自己实现。
    一旦ICE的探测协商开始后，程序最终将会在回调函数on_ice_complete() 中返回。on_ice_complete() 属于结构体： pj_ice_strans_cb.
    应用程序在程序运行的任何时刻都能发送或者接受数据，但是ICE的stream transport 对象它能否发送数据，取决于它发送数据时候的状态。状态分为三种：1，探测协商之前，这种状态下可以发送数据，并且使用的是默认的地址；2，探测协商的过程中，此时不能发送数据；3，探测协商完成之后，这种状态下也可以发送数据，且发送数据的地址为探测成功的地址对！
    应用程序使用pj_ice_strans_sendto()发送数据，并在pj_ice_strans_cb的on_rx_data()回调中返回.
    当需要结束媒体Session时，使用pj_ice_strans_stop_ice()回收ICE Session。

关于ICE stream transport，在单次媒体交互完成后，可以选择销毁ICE stream transport或保留它以备后用。保留ICE stream transport有利有弊，好处是减少下次会话时创建它的时间；坏处是应用程序需要与STUN server以及relay server中相应的端口保活，这会无形中造成电量的损耗(consume power)， 而电量损耗的高低是移动设备应用的重要参考标准之一。

    转载请注明：

    　　名称：pjsip教程(三)之ICE stream transport的使用

    　　作者：大雪先生

    　　链接：http://www.cnblogs.com/ishang/p/3413262.html 

-----------------------------------------------
https://www.cnblogs.com/ishang/p/3413241.html

 中文翻译：pjsip教程(二)之ICE穿越打洞：Interactive Connectivity Establishment简介

　　1:pjsip教程(一)之PJNATH简介

　　2:pjsip教程(二)之ICE穿越打洞：Interactive Connectivity Establishment简介

　　3:pjsip教程(三)之ICE stream transport的使用

　　4:pjsip文档(四)之ICE Session的使用方法

原文地址：http://www.pjsip.org/docs/latest/pjnath/docs/html/group__PJNATH__ICE.htm

Introduction to ICE

　　ICE是提供客户端穿越能力的有力武器，只要在两个客户端之间确实存在一条可以通信的路径，ICE肯定就能找到该路径，并且该路径是两个客户端之间通信路径中最高效的最节省资源的(在两个客户端之间经ICE探测后，可能存在多条路径，而ICE保证从它那里获取的路径是最高效的).

　　ICE把几个协议结合在一起，在两个客户端之间能提供几条候选路径，这在最大程度上保证了两端通信成功的几率。并且它还提供了在几条通信路径中给出优先顺序的能力，让使用中继(中继的方式代价比较昂贵)的传输方式的优先级降到最低，只有在其他路径都行不通的情况下，才会启用该路径。具体的ICE协商的过程包括以下几个几步:

    1：候选地址的收集：ICE客户端收集本地所有可能用于通信的地址。所收集的地址类型分3种：主机候选地址(host candidate），这个地址其实就是本地物理网卡的地址；服务器反射候选地址(server reflexive candidate，其实就是在NAT上关于本地ip的映射地址)，这个地址通过STUN服务器获取；中转/中继候选地址(relay candidate)，这个地址是在使用中继(relay)的传输方式时，在中继服务器(或者称为TURN服务器)上为本地机器所分配的地址。
    2：候选地址的优先策略：一般情况下，使用中继方式而产生的中继候选地址的优先权最低，因为它的代价最昂贵。
    3：将本地候选地址编码，把编码后的候选地址传送至对端，双方通过报告/应答的方式进行协商。
    4：为候选地址配对儿：将本端的地址与对端的地址一一进行配对。此时应该已经通过某种方式得到了对端的候选地址。
    5：为每对儿地址做连接测试。
    6：得到结果：由于已经对所有候选地址一一配对，并一一进行连接测试，所以，如果确实存在一个可以通信的路径，ICE肯定会找到他。

Using ICE transport

　　ICE stream transport 是一个现成可用的对象，可以使用它来进行ICE操作，而且它为应用程序提供了数据发送与接受的接口，而数据收发的路径，正是经ICE协商过后的高效的路径。

Creating custom ICE transport

　　如果ICE stream transport 还是不能满足您的需求，那么您还可以通过使用本软件包提供的ICE Session以及自己的数据传输策略去实现自己的运输层，ICE stream transport 在这方面为您提供了很好的借鉴。

    　　转载请注明：

    　　名称：pjsip教程(二)之ICE穿越打洞：Interactive Connectivity Establishment简介

    　　作者：大雪先生

    　　链接：http://www.cnblogs.com/ishang/p/3413241.html 

分类: pjsip/ice
标签: C++ , pjsip , ice 



