
Htmx的核心特性与使用方法Htmx提供了一系列标记特性，允许开发者在不写Java的情况下轻松构建交互式Web应用，例如：

    hx-get和 hx-post: 这两个属性分别用于发起GET和POST请求。
    hx-trigger: 可以设置不同的事件驱动请求，例如点击或键入。
    hx-target: 指定请求响应内容更新的目标DOM元素。
    hx-swap: 定义更新内容的方式，如替换现有元素的外部HTML。
https://www.sohu.com/a/818214876_121798711

https://blog.csdn.net/csdnnews/article/details/144388095
以下为译文：

自从我在今年尝试用 Go+HTMX（前端库，用来简化基于 HTML 的动态交互开发）+Templ（基于 Go 的模板引擎，专注于简化 Web 应用的开发） 这几种技术来完成自己的一些个人项目之后，我决定放弃在任何个人项目中使用 React。

实际上，抛弃 React 转向 HTMX 也并非个例，在 HTMX 的官网论坛上，你会发现这种情况也很常见，而且各有各的理由，但是他们中却很少有人提到依赖管理疲劳这个问题。
什么是依赖管理疲劳？
最近这段时间，我在用 React 开发个人项目时（https://github.com/erodrigufer/catDict），发现自己花了太多时间在处理 React 包的依赖更新上。我辛辛苦苦将我的软件包更新到最新版本，却经常发现它们的 API 出现了破坏性更改，导致我不得不投入时间重构代码。
我之所以想跟上这些依赖项更新的步伐，是因为我的 Web 应用当时部署在一个公开访问的 EC2 实例上，我希望避免潜在的漏洞。

---- https://www.51cto.com/article/770352.html
使用HTMX的客户端模板

HTMX支持的这种模式的一个变种是使用客户端模板。这是一个在客户端运行的层，接受来自服务器的JSON，并在那里进行标记转换。当我问Gross关于使用带有 JSON的 RESTful 服务时，他指出这是可能的，但前提是REST通常被误解。
一个相反的问题是，我们如何向服务器提交JSON，而不是默认的表单编码？再次，有一个扩展可以做到这一点；即，JSON-ENC。


-----------------------------------------------
有没有 c 语言的 hashmap 库
是的，C语言中有多个hashmap库可供使用。‌

https://github.com/rxi/map

    ‌rxi/map‌：这是一个在GitHub上广泛使用的C语言map库。该库提供了一个简单的API来初始化、设置键值对和获取值。使用示例如下：


Before using a map it should first be initialised using the map_init() function.

map_int_t m;
map_init(&m);

Values can added to a map using the map_set() function.

map_set(&m, "testkey", 123);

To retrieve a value from a map, the map_get() function can be used. map_get() will return a pointer to the key's value, or NULL if no mapping for that key exists.

int *val = map_get(&m, "testkey");
if (val) {
  printf("value: %d\n", *val);
} else {
  printf("value not found\n");
}

When you are done with a map the map_deinit() function should be called on it. This will free any memory the map allocated during use.
//要记得释放 //https://blog.csdn.net/gitblog_09402/article/details/142232840
map_deinit(&m);

-----------------------------------------------

worktile的头像

Linux上常用的命令行浏览器有两种，分别是w3m和lynx。

1. w3m：w3m是一个功能强大的文本模式Web浏览器，它可以在终端环境下浏览网页。它支持HTML、表格、颜色、超链接、图片以及部分JavaScript等功能。使用w3m可以在终端上阅读新闻、查看文档、浏览网页等。

首先，我们需要在Linux系统中安装w3m。可以使用包管理器进行安装，比如在Debian或Ubuntu系统上可以使用下面的命令：

“`shell
sudo apt-get install w3m
“`

安装完成后，就可以使用w3m命令来浏览网页了。例如，如果要浏览百度的首页，可以使用以下命令：

“`shell
w3m http://www.baidu.com
“`

w3m提供了一些快捷键来操作浏览器，比如使用箭头键上下移动，按Enter键打开链接，按Ctrl+U返回上一页等。你可以通过`man w3m`命令来查看更多的使用说明。

2. lynx：lynx是另一个常用的文本模式Web浏览器，它也可以在终端环境下浏览网页。与w3m类似，lynx也支持HTML、颜色、超链接等功能。

要在Linux系统中安装lynx，可以使用包管理器进行安装，比如在Debian或Ubuntu系统上可以使用以下命令：

“`shell
sudo apt-get install lynx
“`

安装完成后，可以使用lynx命令来浏览网页。例如，要浏览百度的首页，可以使用以下命令：

“`shell
lynx http://www.baidu.com
“`

lynx的操作方式与w3m类似，使用箭头键来移动，按Enter键打开链接，按Q键退出浏览器等。你可以通过`man lynx`命令查看更多的使用说明。

总结：w3m和lynx是Linux上常用的命令行浏览器，它们可以在终端环境下浏览网页，支持HTML、超链接、颜色等功能。你可以根据自己的需求选择其中之一来使用。
7个月前
0条评论
不及物动词的头像
不及物动词
这个人很懒，什么都没有留下～

在Linux上有许多命令行浏览器可供选择。这些浏览器可以让用户在没有图形界面的情况下浏览网页，并通过命令行输入指令来使用各种功能。

以下是一些常用的Linux命令行浏览器：

1. Lynx：Lynx是一个非常流行的文本模式浏览器，支持HTML、HTTP、FTP等协议。它的用户界面简单，易于操作，可以在终端中浏览网页、导航链接、填写表单等。

2. Links2：Links2是Lynx的升级版本，它不仅支持文本模式，还能够以图形方式显示图像、访问JavaScript网页和支持标签页浏览。

3. w3m：w3m是一个功能强大的命令行浏览器，能够以文本和图形方式显示网页。它支持图像、表格以及Unicode字符，并且可以通过配置文件进行自定义设置。

4. Elinks：Elinks是一个基于w3m的多功能命令行浏览器，具有标签、导航栏、书签管理等功能，并且支持多种协议和编码。

5. Browsh：Browsh是一个使用Mozilla的Gecko引擎的命令行浏览器，可以显示网页的完整图像和CSS样式。它采用了远程呈现技术，可以在低带宽环境下实现高质量的网页浏览。

这些命令行浏览器功能各异，适用于不同的使用场景。比如，如果你只需要简单地浏览网页，Lynx可能是一个不错的选择；如果你需要显示图像和访问JavaScript网页，Links2可能更合适；如果你需要更多的功能和定制选项，w3m或Elinks可能更适合你的需求。

总而言之，Linux上有许多命令行浏览器可供选择，用户可以根据自己的需求选择合适的浏览器来浏览网页。这些浏览器提供了在没有图形界面的情况下浏览网页的便利，同时也支持各种协议和功能，满足用户的不同需求。


在Linux上，有许多命令行浏览器可供使用，这些浏览器专为在终端界面中浏览互联网内容而设计。下面介绍几种常用的命令行浏览器，并简要讲解它们的功能和使用方法。

1. Lynx:
Lynx是一个非常受欢迎的命令行浏览器，它提供基本的浏览功能，可以显示纯文本网页，支持图像的显示以及表单的填写和提交。Lynx的使用非常简单，只需在终端中输入”lynx”命令，并指定要访问的网址即可。Lynx还提供了丰富的快捷键操作方式，可以方便地浏览网页内容。

2. w3m:
w3m也是一款流行的命令行浏览器，它与Lynx类似，提供了类似的功能。与Lynx不同的是，w3m支持在终端中直接显示图像，并提供了多标签页浏览的功能，可以同时打开多个网页进行切换。使用w3m时，只需在终端中输入”w3m”命令，并指定要访问的网址即可。

3. Links:
Links是另一个常用的命令行浏览器，它提供了类似于Lynx和w3m的功能，支持纯文本和图像的浏览，同时还提供了一些附加功能，如下载网页、查看文件属性等。使用Links时，只需在终端中输入”links”命令，并指定要访问的网址即可。Links还提供了一些可选的参数，可以用于控制浏览器的行为。

4. Elinks:
Elinks是Links的一个分支，它在Links的基础上添加了一些额外的功能和特性。Elinks支持图像、JavaScript和表单操作，并提供了多标签页浏览、搜索引擎插件等功能。使用Elinks时，只需在终端中输入”elinks”命令，并指定要访问的网址即可。

5. Browsh:
Browsh是一个比较新的命令行浏览器，它使用Mozilla的Gecko引擎来渲染网页内容。Browsh提供了更为先进的用户界面和更好的网页渲染效果，支持图像显示、JavaScript、CSS和表单操作。使用Browsh时，只需在终端中输入”browsh”命令，并指定要访问的网址即可。

除了以上几种常用的命令行浏览器外，还有一些其他的命令行浏览器可供选择，如NetSurf、Lynxlet等。每种浏览器都有其特点和适用场景，你可以根据个人需求选择适合自己的命令行浏览器使用。无论选择哪个浏览器，都可以在命令行界面中方便地浏览互联网内容，实现基本的网页浏览功能。

-----------------------------------------------

https://zhuji.jb51.net/linux/5314.html
--
出乎众人意料的是，就在 Google 因涉嫌违反反垄断法规被美国司法部调查，并有可能面临被迫出售 Chrome 浏览器的局面时，Chrome 却联合 Opera、Vivaldi、Waterfox 和 Wavebox 成立了一个名为“浏览器选择联盟”（简称 BCA）的组织，剑指微软的 Edge 浏览器。

同时该组织还特地上线了一个网站（https://browserchoicealliance.org/），其在首页直接写道，「在过去十年中，微软一直在使用各种转变策略，包括暗中操作和误导性用户界面，阻止用户可靠地访问他们喜欢的浏览器或将其设置为默认浏览器。」于是，该“浏览器选择联盟”呼吁欧盟委员会将微软的 Edge 列为《数字市场法》（DMA）下的守门人。
https://blog.csdn.net/csdnnews/article/details/144158311
---
https://t.cj.sina.com.cn/articles/view/1746173800/68147f68019013c5f

促使不少 Firefox 用户转向了分支版本 Pale Moon——目前此分支仍在面向 Windows 与 Linux 的环境里积极发展。Pale Moon 保留了 Australis 之前的 UI，继续坚持单线程设计（因此内存效率更高），而且仍然支持经典的 Firefox 扩展。它还衍生出另一个后续项目 Basilisk，属于基于更高 Firefox 代码库版本的分支更新。
-----------------------------------------------
https://carbon.compiler-explorer.com/

-----------------------------------------------

WinDynamicDesktop_5.6.0_x64_Portable
https://github.com/t1m0thyj/WinDynamicDesktop

-----------------------------------------------

lsp 服务器如何调用，很值得一看
https://github.com/rickard67/LSP-Pascal-Library?tab=readme-ov-file#goto-type-definition-request

参考
https://www.cnblogs.com/-867259206/p/17981984

https://juejin.cn/post/7254699605668593723
https://zhuanlan.zhihu.com/p/667884657
-----------------------------------------------
https://www.cnblogs.com/chinasoft/p/14111805.html
2019年6月25日，EMB 官方与FMXlinux 达成协议，在以后的新产品中，可以免费使用FMXLinux, 用户
可以通过Getit 现在并安装FMXLinux。
--
一个比较好的教程
https://www.cnblogs.com/ypldbk/p/14356233.html

需要在 linux 上先安装 LinuxPAServer22.0.tar.gz
C:\Program Files (x86)\Embarcadero\Studio\22.0\PAServer


-----------------------------------------------
Python气象绘图笔记（三）——地理图
https://zhuanlan.zhihu.com/p/372821243
https://www.osgeo.cn/pygis/cartopy-intro.html
-----------------------------------------------
https://www.emojiall.com/zh-hant/sub-categories/I14
https://juejin.cn/post/7225074892357173308

https://www.unicode.org/charts/PDF/U13000.pdf
https://www.unicode.org/reports/tr51/#EBNF_and_Regex
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Unicode Character U+13000</title>
</head>
<body>
    <p>字符实体表示：&#x13000;</p>
    <!-- 直接输入，确保浏览器支持 -->
    <p>直接输入：𓀀</p>
</body>
</html>
https://xlog.cjh0613.com/Download-and-read-offline-Wikipedia-using-Kiwix
-----------------------------------------------
https://spidermonkey.dev/
firefox 的 js 引擎
https://www.orcode.com/question/530548_k4e88e.html
还有 python 的接口
https://blog.csdn.net/gitblog_00128/article/details/141881145

import spidermonkey

# 初始化 JS 上下文
jsctx = spidermonkey.Runtime().new_context()


-----------------------------------------------
zig 语言圣经
https://course.ziglang.cc/advanced/interact-with-c
-----------------------------------------------
rust 和 zig 都处理不了除 0 ，内存越界异常这样的错误的。都是依赖的代码检测。也就是说它没有 vc 的 seh ，golang delphi 那样的捕获机制。
所以这两在未来应该是无法与 golang 相比的。

参考
https://zhuanlan.zhihu.com/p/667948711
开发者问题：Rust 如何处理异常？

目前，一些开发人员对旨在协助使用 Rust 进行 Windows 驱动程序开发的新工具平台表示担忧。引发讨论的一个值得注意的问题是 Rust 对异常的处理。
一位开发人员指出：“结构化异常处理是 Windows 内核开发（以及整个操作系统）的一个重要方面，它为使 Rust 成为 Windows 内核开发的可行选择提出了重大挑战。”

但与其他编程语言不同的是，Rust 语言中不存在异常。它通常使用 Result 类型来处理可恢复的错误。当遇到不可恢复的错误时，Rust 会提供一个特殊的宏panic!。当这个宏执行时，程序会打印错误信息，展开（unwind）并清理当前堆栈（Stack），然后退出程序的执行。
正如另一位开发人员所说，“Windows 内核中的恐慌通常是最后的手段，只应保留在内核损坏且无法恢复的情况下。” 因此，很多人认为Rust在内核代码中调用Panic的方式是不可取的，这可能会导致系统崩溃。

----
d 语言能捕获除0错吗

在 D 语言中，除以零的错误处理是通过异常机制来实现的。D 语言的设计允许开发者捕获运行时错误，包括除以零的情况。以下是 D 语言如何处理除以零错误的详细信息：
1. 运行时检查
D 语言在运行时会检查除以零的情况。如果发生除以零，D 语言会抛出一个 FloatingPointError 或 DivisionByZero 异常（具体取决于上下文和数据类型）。
2. 异常处理机制
D 语言提供了强大的异常处理机制，允许开发者捕获和处理运行时错误。你可以使用 try 和 catch 语句来捕获除以零的异常。
3. 示例代码
以下是一个简单的 D 语言示例，展示如何捕获除以零的错误：
import std.stdio;
import core.runtime; // 导入运行时库以处理异常

void main() {
    double numerator = 10.0;
    double denominator = 0.0;

    try {
        double result = numerator / denominator; // 可能会抛出异常
        writeln("Result: ", result);
    } catch (FloatingPointError e) {
        writeln("Error: Division by zero");
    } catch (Exception e) {
        writeln("An unexpected error occurred: ", e.msg);
    }
}

不过实测似乎不能捕获数组越界。

----
不过 Rust 的 catch_unwind 似乎可以捕获除 0 错误。不知是否可以捕获内存越界。


fn main() {

    main2();
    return;

    let s = "123aaa中文";

    //let c = s[0];  //不行

    //let mut x=&s[1..3];

    let mut x = &s[1..2];
    
    x = &s[2..2];

    println!("Hello, world! {}{}", s, x);

    //----------------------------------------------- 了解字符串特性 
    //https://www.cnblogs.com/azoux/p/18294699

    // 创建单个字符
    let c: char = 'a';

    // 遍历字符串中的字符
    for c in "hello".chars() {
        println!("{}", c);

        if (c == 'o'){
            println!("ooo{}", c);
        }

    }

    

    // 判断字符是否是数字
    let c = '7';
    if c.is_digit(10) {
        println!("'{}' is a digit", c);
    }

    // 创建一个空的 String
    let mut s = String::new();
    
    // 从字符串字面量创建 String
    let data = "initial contents";
    let mut s = data.to_string(); // 或者 let s = String::from(data);
    
    // 追加字符串
    s.push_str(" more content");
    
    // 添加单个字符
    s.push('!');
    
    println!("{}", s); // 输出: initial contents more content!

    f1(0);


    println!("aaa{}", s); // 输出: initial contents more content!

}//

fn f1(i:i32){
    //let mut i = 1;
    1 / i;

    //let mut i = 1 - 1;
    1 / i;

}//

use std::panic;

fn main2() {
    // 使用 catch_unwind 捕获 panic
    let result = panic::catch_unwind(|| {
        // 这里是可能导致 panic 的代码
        let x = 10;
        let y = 0;
        //println!("Result: {}", x / y); // 这里会导致 panic

        println!("test...\r\n");

        f1(0);


    });

    match result {
        Ok(_) => println!("No panic occurred."),
        Err(err) => {
            // 处理 panic
            println!("A panic occurred: {:?}", err);
        }
    }

    println!("Program continues after panic handling.");

    println!("ok!!!\r\n");

}//

----
这个功能应该是有一定限制的。
https://cloud.tencent.com/developer/article/1680248
没错，它的行为几乎就是try/catch了。panic！宏也被捕获了，程序并也没有挂，返回了Err。尽管如此，Rust的目的并不是让它成为try/catch机制的实现，而是当Rust和其他编程语言互动时，避免其他语言代码块throw出异常。所以呢，错误处理的正道还是用Result。
从catch_unwind的名字上，需要留意下unwind这个限定词，它意味着只有默认进行栈反解的panic可以被捕获到，如果是设为直接终止程序的panic，就逮不住了。
细节可进一步参考Rust Documentation。



-----------------------------------------------

https://juejin.cn/post/7299743820434112539

https://www.cnblogs.com/lori/p/17766768.html
本文根据 RFC4226 和 RFC6238 文档，详细的介绍 HOTP 和 TOTP 算法的原理和实现。
两步验证已经被广泛应用于各种互联网应用当中，用来提供安全性。对于如何使用两步验证，大家并不陌生，无非是开启两步验证，然后出现一个二维码，使用支持两步验证的移动应用比如 Google Authenticator 或者 LassPass Authenticator 扫一下二维码。这时候应用会出现一个6位数的一次性密码，首次需要输入验证从而完成开启过程。以后在登陆的时候，除了输入用户名和密码外，还需要把当前的移动应用上显示的6位数编码输入才能完成登陆。
这个过程的背后主要由两个算法来支撑：HOTP 和 TOTP。也分别对应着两份 RFC 协议 RFC4266 和 RFC6238。前者是 HOTP 的标准，后者是 TOTP 的标准。本文将使用图文并茂的方式详细介绍 HOTP 和 TOTP 的算法原理，并在最后分析其安全性。当然所有内容都是基于协议的，通过自己的理解更加直观的表达出来。

为了确保在不同语言下生成相同的 TOTP 结果，你需要确保使用相同的密钥和相同的时间戳步长。同时，你还需要确保使用相同的哈希算法（通常是 HMAC-SHA1 或 HMAC-SHA256）。

https://www.cnblogs.com/Fogram-c/p/16978939.html

-----------------------------------------------

WifiP2pManager.IPeerListListener

Wi-Fi直连技术允许iOS和Android设备之间进行直接连接，无需通过传统的无线路由器或热点。‌ 这种技术通过Wi-Fi Direct标准实现，使得设备之间可以直接通信，适用于多人游戏、文件共享等场景。

在技术实现方面，Android设备自Android 4.0（API级别14）起支持Wi-Fi P2P技术，通过WifiP2pManager类和其他相关API，可以实现设备间的发现、连接和数据传输。iOS设备则通过AirDrop功能实现类似的近距离无线传输，但需要双方设备都开启Wi-Fi和蓝牙。

具体操作步骤方面，对于Android设备，需要开启Wi-Fi和蓝牙，通过WifiP2PManager进行设备发现和连接。对于iOS设备，需要在控制中心开启AirDrop，并选择“所有人”或“仅限联系人”进行文件传输。双方设备需要在彼此的可传输范围内，并且AirDrop设置匹配，才能成功传输数据‌。

-----------------------------------------------

https://www.cnblogs.com/superanyi/archive/2011/04/07/2008632.html

-----------------------------------------------

https://xometry.asia/zh-hans/bodo-pistor-professional-model-making-and-3d-printing-for-producing-tyres/
3d 打印
https://www.jlc.com  也有
http://www.mohou.com/
https://weibo.com/ttarticle/p/show?id=2309351000154136273857088336
-----------------------------------------------
https://www.cnblogs.com/apachecn/p/18318407
https://www.cnblogs.com/coolYuan/p/9168284.html
Watt Toolkit

在线的 arm 模拟器
https://cpulator.01xz.net/?sys=arm

https://blog.csdn.net/qq_19859865/article/details/142537207

-----------------------------------------------

无损放大
https://github.com/upscayl/upscayl
https://www.uisdc.com/animatediff-lightning
-----------------------------------------------


如何让编译器将所有代码合并到一个 JS 中?
推荐答案

你必须使用编译器的命令行参数

--outFile FILE 连接输出到单个文件

tsc --outFile modules.js main.ts app.ts

-----------------------------------------------
https://github.com/lark-parser/lark

https://blog.csdn.net/liuyuan_jq/article/details/137432643
参考

https://github.com/lark-parser/lark/blob/master/examples/calc.py
Python-Lark是一个强大的、现代的解析库，专为Python开发者设计，用于处理各种语法结构的文本解析任务。这个库的出现旨在简化和优化文本解析的过程，使开发者能够高效地构建解析器，处理从简单的命令行语法到复杂的编程语言语法等各种输入。

使用Python解析TypeScript代码的工具和库
除了ast模块之外，Python还提供了一些其他的工具和库，可以帮助我们解析  比如ply和pyleri，
1.+使用ast模块解析TypeScript代码
2.+使用ply和pyleri解析TypeScript代码
3.+使用lark解析TypeScript代码


--
https://github.com/search?q=parsing%20toolkit&type=repositories

BNF(Backus-Naur Form)是一种用于描述语言结构的文法表示方法。它由美国数学家约翰·伯纳德·纳尔逊(John Backus Naur)于1962年提出,用于描述自然语言。

https://blog.csdn.net/gitblog_00063/article/details/138744646
Chevrotain的核心在于它的灵活性和效率。你可以直接在JavaScript中编写和修改语法规则，这使得开发过程更加敏捷，调试也更为方便。此外，Chevrotain还提供了丰富的API和DSL（领域特定语言），用于创建和操作词法分析器和解析器。一个值得注意的特性是其内置的支持LL(K)和通过第三方插件实现的LL(*)解析，这使得处理复杂语法结构变得轻松。

它有个在线编辑器，非常的方便
https://chevrotain.io/playground/

https://devpress.csdn.net/react/62ed776cc6770329307f263e.html


-----------------------------------------------
-----------------------------------------------
以下是一个使用Python编写的代码分析器示例,可以对多种编程语言的源代码进行分析:

import ast
import codestyle
import codex
import dx
import git
import keyword
import re
import tokenize
import traceback
import yaml


def analyze_code(code_path):
    # 读取代码文件内容
    with codex.open(filename=code_path, encoding="utf-8") as f:
        code = f.read()

    # 解析代码
    lines = ast.parse(code)

    # 查找关键字
    keywords = keyword.kwlist(code)

    # 代码格式检查
    formatted_code = codestyle.check_style(code)

    # 代码结构分析
    structure = ast.parse(formatted_code)

    # 代码树分析
    tree = ast.tree(structure)

    # 打印树节点
    for node in tree.body:
        if isinstance(node, ast.Assign):
            print(f"Assignment: {node.targets}")
        elif isinstance(node, ast.AnnAssign):
            print(f"Annotation: {node.targets}")
        elif isinstance(node, ast.Import):
            print(f"Import: {node.module}")

    # 打印注释
    comments = [co.comments[0] for co in ast.walk(tree)]
    for comment in comments:
        print(f"{comment.body.strip()}")

    # 打印错误信息
    errors = []
    for usage in ast.walk(tree):
        if isinstance(usage, ast.Import):
            errors.append(f"{usage.module} is imported but not defined")
        elif isinstance(usage, ast.ImportFrom):
            errors.append(f"{usage.module} is imported from but not defined")

    if errors:
        print("\nErrors:")
        for error in errors:
            print(f"{error}")

# 示例:分析Python代码
analyze_code("my_program.py")

# 输出

该示例使用Python内置的ast、codestyle和codex库来分析代码文件。分析包括:代码格式检查、代码树分析、注释分析以及错误检查。

在这个示例中,分析的代码是“my_program.py”文件。输出将显示该文件中的关键字、注释以及错误信息。

你可以根据需要修改示例以分析其他编程语言的代码。例如,要分析Java代码,可以使用Java ast库和Java Codex库,以及Java代码格式检查工具和Java注释工具。

-----------------------------------------------
===============================================
https://github.com/DeveloppeurPascal/Delphi-Game-Engine

中提到 fmx 本身就是游戏引擎，无需第三方库。还给出了很多参考。
例如
https://github.com/DeveloppeurPascal/Delphi-FMX-Game-Snippets
有很多示例。作者应该是个法国人。

另外他也推荐了
https://github.com/Fr0sT-Brutal/awesome-pascal?tab=readme-ov-file#game-dev
从这里面看
https://github.com/BeRo1985/kraft
的物理引擎似乎是可以用的。

----
这是另外一个。
https://github.com/gbegreg/FMXFPS
这是 fps 游戏。用到了以下的修改控件，可以一看
https://github.com/gbegreg/GBE3D

----
应该还有很多。这些仅仅是用关键字 “FMX.Controls3D game” 在 bing 国际中搜索的前几页。所以应该不用担心。而且前面的示例更新非常多，非常近。
----
这些是他的开源游戏
https://github.com/DeveloppeurPascal/DevPas-Games-Pack
他的网站上似乎还有电子书。

--------
另外根据 delphi 11/12 的宣传页面的游戏画面可以搜索到

Delphi开发的即时战略游戏《Rise of Legions》
https://blog.csdn.net/xyzhan/article/details/124962125
这个页面还介绍了很多。
还有 delphi 官方的
https://www.embarcadero.com/case-study/broken-games-case-study
https://delphi.embarcadero.com/
https://store.steampowered.com/app/748940/Rise_of_Legions/

似乎是说这个就是用 fmx 开发的。

-----------------------------------------------
package main

import (
    "github.com/g3n/engine/app"
    "github.com/g3n/engine/core"
    "github.com/g3n/engine/geometry"
    "github.com/g3n/engine/gls"
    "github.com/g3n/engine/graphic"
    "github.com/g3n/engine/gui"
    "github.com/g3n/engine/math32"
    "github.com/g3n/engine/renderer"
    "github.com/g3n/engine/window"
)

func main() {
    // 创建应用程序
    a := app.App()

    // 获取窗口
    win := a.IWindow.(*window.GlfwWindow)

    // 获取设备像素比
    dpr := win.GetScale()

    // 设置窗口大小（逻辑像素）
    width, height := int(800*dpr), int(600*dpr)
    win.SetSize(width, height)

    // 创建场景
    scene := core.NewNode()

    // 创建相机
    cam := camera.New(1)
    cam.SetPosition(0, 0, 3)
    scene.Add(cam)

    // 创建文本
    font, err := gui.NewFont("fonts/FreeSans.ttf")
    if err != nil {
        panic(err)
    }
    font.SetDPI(72 * dpr) // 调整字体 DPI

    label := gui.NewLabel("Hello, High DPI World!")
    label.SetFont(font)
    label.SetFontSize(14 * float32(dpr)) // 调整字体大小
    label.SetPosition(10, 10)
    scene.Add(label)

    // 创建渲染器
    rend := renderer.NewRenderer(gs)
    rend.SetPixelRatio(float64(dpr))

    // 运行应用程序
    a.Run(func(renderer *renderer.Renderer, deltaTime time.Duration) {
        rend.Render(scene, cam)
    })
}

















