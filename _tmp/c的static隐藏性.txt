
[深度解剖C语言] --关键字 static

https://blog.csdn.net/qq_58325487/article/details/122527313

[深度解剖C语言] --关键字 static
小白又菜
于 2022-01-16 20:05:35 发布 3970
收藏 33
分类专栏： C语言 文章标签： c语言 开发语言 后端
版权
C语言 专栏收录该内容
18 篇文章 21 订阅
订阅专栏

static ---最名不副实的关键字

目录

1.static修饰全局变量

2.static修饰函数

3.static修饰局部变量

static的作用：
1.static修饰全局变量

我们创建两个源文件，一个test.c，一个main.c

现在我们在test.c文件下定义一个全局变量

int g_val = 100;

我们在main.c下进行调用打印g_val我们能访问到g_val吗？

答案是可以的

如果给g_val加上static修饰我们还能再main.c下访问到吗？

static int g_val = 100;

这时候答案是不行的！

 因此我们得到了static的第一个结论

结论1：static修饰全局变量，该变量只在本文件内被访问，不能在其他文件被直接访问。
2.static修饰函数

 我们在test.c文件下写一个show()函数,请问在main.c文件能调用吗？

 

 答案是可以的。

那这时候给show（）函数加上static,main.c下还能调用该函数吗？

 

 

答案是不可以的！因此我们可以得到第二个结论

结论2：static修饰函数，该函数只能在本文件内被访问，不能被其他文件访问，但是可以通过嵌套的方式调用，变相的封装的表现。

但是我们可以通过函数嵌套调用的方式调用show函数。

什么意思呢？就是在show函数的相同文件内创建一个新的函数，调用show函数，我们再在main.c文件下调用这个新的函数，已达到调用show()函数的目的。 

例：我们创建一个show_helper函数，来调用static修饰的show函数，我们再在main.c文件内调用show_helper函数。

 

 结果：

通过嵌套的方式调用，变相的封装的表现。

因此static项目维护，可以提供安全保护。被static修饰，主要限制的是作用域。
3.static修饰局部变量

    void fun()
    {
    	int i = 0;
    	i++;
    	printf("i = %d\n", i);
    }
     
    int main()
    {
    	for (int i = 0; i < 10; i++)
    	{
    		fun();
    	}
    }

你知道这段代码，它的运行结果是什么吗？

通过结果我们发现他打印了10个1，其中，i是局部变量，具有临时性，函数调用时开辟空间并初始化，函数结束释放空间。

那么如果我们static修饰局部变量，即给int i  = 0；前static所修饰，结果还会一样吗？

    void fun()
    {
    	static int i = 0;
    	i++;
    	printf("i = %d\n", i);
    }
     
    int main()
    {
    	for (int i = 0; i < 10; i++)
    	{
    		fun();
    	}
    }

 答案当然是不一样的， 我们发现，结果变成了1-10。因此我们可以得到第三个结论。

分析：

结论3：static修饰局部变量，更改该局部变量的生命周期。

生命周期：将临时变量的生命周期变成全局变量的生命周期。

作用域不变：作用域仍然是代码块内。

总结：

static:

结论1：static修饰全局变量，该变量只在本文件内被访问,不能在其他文件被直接访问。

结论2：static修饰函数，该函数只能在本文件内被访问，不能被其他文件访问。但是可以通过嵌套的方式调用，变相的封装的表现。

结论3：static修饰局部变量，更改该局部变量的生命周期。
生命周期：将临时变量的生命周期 -- 全局变量的生命周期。
作用域不变：作用域仍然是在本代码块内。

-----------------------------------------------
https://blog.csdn.net/weixin_60804760/article/details/127467571

"
    其本质是：

        全局变量本身是具有外部链接属性的，在A文件中定义的全局变量，在B文件中可以通过【链接】来使用；

        但如果全局变量被static修饰，那这个外部链接属性就会被修改成内部链接属性，此时这个全局变量就只能在自己的源文件中使用；

3.修饰函数

  ——称为静态函数

      static对函数的修饰与修饰全局变量十分相似，修饰函数时会改变函数的链接属性，从而使得函数的作用域变小。

"

---------------------------
【C语言】 Static关键字的用法和详解（太细了！！！）
程序羊羊的笔记本
已于 2022-11-18 00:51:34 修改 13871
收藏 118
分类专栏： C语言 文章标签： c语言 软件工程
版权
C语言 专栏收录该内容
3 篇文章 0 订阅
订阅专栏

文章目录

    目录

    前言

    一、static是什么

    二、static的用法

    1.修饰局部变量

    2.修饰全局变量

             3.修饰函数

    总结

前言

  static在不同的语言中又有不同的使用方法，本文介绍的是static在C语言当中的用法。

一、static是什么

  static在C语言中是关键字，中文直译过来是“静态的”，static关键字在C语言中主要是用来修饰变量和函数。
二、static的用法
1.修饰局部变量

  ——称为静态局部变量

    static修饰局部变量时，会改变局部变量的存储位置，从而使得局部变量的生命周期变长。

  我们用一段代码来进行详解：

    void test()
    {
    	int x = 0;
    	x++;
    	printf("%d ", x);
    }
     
    int main()
    {
    	int i = 0;
    	while (i < 10)
    	{
    		test();
    		i++;
    	}
    	return 0;
    }

  这段代码中每次调用test（）函数时创建局部变量x赋值为0，每次局部变量x出了test（）函数后都会自行销毁。

  所以可以很容易得到输出结果为：1 1 1 1 1 1 1 1 1 1

  接着我们用上static关键字来修饰test（）函数中的局部变量x：

    void test()
    {
    	static int x = 0;
    	x++;
    	printf("%d ", x);
    }
     
    int main()
    {
    	int i = 0;
    	while (i < 10)
    	{
    		test();
    		i++;
    	}
    	return 0;
    }

  输出结果变成了：1 2 3 4 5 6 7 8 9 10

  原因是static修饰了局部变量x，令局部变量x变成静态的，使得每次test（）函数结束时局部变量x都不销毁，再次进入test（）函数时则保留原有数值运行，因此x++数值越来越大。

    其本质是：

      普通的局部变量创建后是放在栈区中，这种局部变量进入作用域时创建，出了作用域就销毁；

      但static修饰后的局部变量则放在静态区中，它改变了局部变量的存储位置，从而使得变量的生命周期延长，延长至程序结束才销毁。

注意：static修饰局部变量只改变生命周期，不改变作用域！
2.修饰全局变量

  ——称为静态全局变量

      static修饰全局变量时，会改变全局变量的链接属性，从而使得全局变量的作用域变小。

  这段话什么意思呢，先来简单说说全局变量。

  全局变量的作用域十分的广，只要在一个源文件中定义后，这个程序中的所有源文件、对象以及函数都可以调用，生命周期更是贯穿整个程序。文件中的全局变量想要被另一个文件使用时就需要进行外部声明（以下用extern关键字进行声明）。

  接着我们用代码进行解析：

  全局变量x在自己的文件内可以直接使用。

  但当全局变量在另一个文件内未进行外部声明就想直接用时会出现未定义的错误：

   此时只要使用extern关键字声明一下即可：

   接着我们进入正题，当我们用static修饰全局变量x后：

 

 

  会发现生成错误，无法解析外部符号x，全局变量x不能被test.c文件调用了。所以我们可以很容易看出static修饰后让全局变量x的作用域变小了，令全局变量x无法被其他文件调用。

    其本质是：

        全局变量本身是具有外部链接属性的，在A文件中定义的全局变量，在B文件中可以通过【链接】来使用；

        但如果全局变量被static修饰，那这个外部链接属性就会被修改成内部链接属性，此时这个全局变量就只能在自己的源文件中使用；

3.修饰函数

  ——称为静态函数

      static对函数的修饰与修饰全局变量十分相似，修饰函数时会改变函数的链接属性，从而使得函数的作用域变小。

  我们直接上代码：

  函数在另一个文件中使用时同样需要声明。

  但当函数被static修饰后：

  会发现Add函数无法被解析了，static修饰后Add函数的作用域变小了。

    本质和全局变量很像：

      函数本身也是有外部链接属性的；

      被static修饰后，函数的外部链接属性被修改成内部链接属性，使得这个函数只能在自己的源文件内被使用，因此函数的作用域就变小了。

总结

  以上就是要说的内容，本文仅仅简单介绍了static在C语言的使用，static在其他语言中还有更多的使用方法。本文是小编的第一篇知识总结，如有不足的地方欢迎大佬们在评论区指出。也还望各位觉得有用的话一键三连+关注，谢谢！






